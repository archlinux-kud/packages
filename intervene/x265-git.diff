diff --git a/PKGBUILD b/PKGBUILD
index f417b48..b16b2ce 100644
--- a/PKGBUILD
+++ b/PKGBUILD
@@ -1,17 +1,22 @@
 # Maintainer : Daniel Bermond <dbermond@archlinux.org>
 
+# Set this variable to true or pass with makepkg to build with LLVM.
+: ${_llvm_build:=false}
+
 pkgname=x265-git
-pkgver=3.5.r103.g34532bda1
+pkgver=3.5.r159.g7f67d23c1
 pkgrel=1
 pkgdesc='Open source H.265/HEVC video encoder (git version)'
 arch=('x86_64')
 url='https://bitbucket.org/multicoreware/x265_git'
-license=('GPL')
-depends=('gcc-libs')
-makedepends=('git' 'cmake' 'nasm')
+license=('GPL-2.0-or-later')
+depends=('gcc-libs' 'glibc')
+makedepends=('git' 'cmake' 'nasm' 'ninja')
+${_llvm_build} && makedepends+=('llvm18-opt')
 provides=('x265' 'libx265.so')
 conflicts=('x265')
-source=('git+https://bitbucket.org/multicoreware/x265_git.git')
+options=('!lto') # don't include our lto flags
+source=('git+https://bitbucket.org/multicoreware/x265_git')
 sha256sums=('SKIP')
 
 pkgver() {
@@ -19,8 +24,42 @@ pkgver() {
 }
 
 build() {
+    local extra_flags
+    local cpu_simd_flags=(
+        # Disable MMX and 3DNow
+        '-mno-mmx' '-mno-3dnow' '-mno-3dnowa'
+        # Disable SSE3+ iterations only
+        '-mno-sse3' '-mno-ssse3' '-mno-sse4' '-mno-sse4a' '-mno-sse4.1' '-mno-sse4.2'
+        # Disable XOP/FMA4/CV16 extensions
+        '-mno-xop' '-mno-fma4' '-mno-f16c'
+        # Disable POPCNT/LZCNT extensions
+        '-mno-popcnt' '-mno-lzcnt'
+        # Disable AVX, and enable AVX2 and FMA3 extensions
+        '-mno-avx' '-mavx2' '-mfma'
+    )
+
+    if ${_llvm_build}; then
+        # Set path to our custom LLVM build set in dependencies
+        export PATH=/opt/llvm18/bin:$PATH
+        export LD_LIBRARY_PATH=/opt/llvm18/lib
+        export CXX=clang++
+
+        # Clang optimizes code with SSE2 instructions
+        cpu_simd_flags+=('-mno-sse' '-msse2')
+        # Build with full LTO using LLD linker
+        extra_flags=('-fuse-ld=lld' '-flto=full' '-Wno-unused-command-line-argument')
+    else
+        # GCC optimizes code with SSE instructions
+        cpu_simd_flags+=('-msse' '-mno-sse2' '-msse2avx')
+        # Enable automatic LTO linking and include fat objects
+        extra_flags=('-flto=auto' '-ffat-lto-objects')
+    fi
+
+    # Add LTO and CPU capabilities flags before proceeding
+    export CXXFLAGS+=" -mtune=native ${extra_flags[@]} ${cpu_simd_flags[@]}"
+
     cmake -S x265_git/source -B build-12 \
-        -G 'Unix Makefiles' \
+        -G Ninja \
         -DCMAKE_INSTALL_PREFIX='/usr' \
         -DHIGH_BIT_DEPTH='ON' \
         -DMAIN12='ON' \
@@ -29,10 +68,10 @@ build() {
         -DENABLE_SHARED='OFF' \
         -DCMAKE_ASM_NASM_FLAGS='-w-macro-params-legacy' \
         -Wno-dev
-    cmake --build build-12
+    ninja -C build-12
     
     cmake -S x265_git/source -B build-10 \
-        -G 'Unix Makefiles' \
+        -G Ninja \
         -DCMAKE_INSTALL_PREFIX='/usr' \
         -DHIGH_BIT_DEPTH='ON' \
         -DEXPORT_C_API='OFF' \
@@ -40,10 +79,10 @@ build() {
         -DENABLE_SHARED='OFF' \
         -DCMAKE_ASM_NASM_FLAGS='-w-macro-params-legacy' \
         -Wno-dev
-    cmake --build build-10
+    ninja -C build-10
     
     cmake -S x265_git/source -B build \
-        -G 'Unix Makefiles' \
+        -G Ninja \
         -DCMAKE_INSTALL_PREFIX:PATH='/usr' \
         -DENABLE_SHARED='ON' \
         -DENABLE_HDR10_PLUS='ON' \
@@ -55,9 +94,9 @@ build() {
         -Wno-dev
     ln -s ../build-10/libx265.a build/libx265_main10.a
     ln -s ../build-12/libx265.a build/libx265_main12.a
-    cmake --build build
+    ninja -C build
 }
 
 package() {
-    DESTDIR="$pkgdir" cmake --install build
+    DESTDIR="$pkgdir" ninja -C build install
 }
