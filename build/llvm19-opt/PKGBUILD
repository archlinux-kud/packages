# Maintainer: Albert I <kras@raphielgang.org>

# This PKGBUILD is heavily based on llvm-git maintained by these contributors:
# Contributor: Reza Jahanbakhshi <reza.jahanbakhshi at gmail dot com
# Contributor: Lone_Wolf <lone_wolf@klaas-de-kat.nl>
# Contributor: yurikoles <root@yurikoles.com>
# Contributor: bearoso <bearoso@gmail.com>
# Contributor: Luchesar V. ILIEV <luchesar%2eiliev%40gmail%2ecom>
# Contributor: Anders Bergh <anders@archlinuxppc.org>
# Contributor: Armin K. <krejzi at email dot com>
# Contributor: Christian Babeux <christian.babeux@0x80.ca>
# Contributor: Jan "heftig" Steffens <jan.steffens@gmail.com>
# Contributor: Evangelos Foutras <evangelos@foutrelis.com>
# Contributor: Hesiod (https://github.com/hesiod)
# Contributor: Roberto Alsina <ralsina@kde.org>
# Contributor: Thomas Dziedzic < gostrc at gmail >
# Contributor: Tomas Lindquist Olsen <tomas@famolsen.dk>
# Contributor: Tomas Wilhelmsson <tomas.wilhelmsson@gmail.com>

pkgname=llvm19-opt
_pkgver=19.1.1
pkgver=${_pkgver/-/_}
pkgrel=1
epoch=1
pkgdesc='LLVM compiler suite stable version 19 (installs to /opt)'
arch=('x86_64')
url='https://llvm.org/'
license=('Apache-2.0 WITH LLVM-exception')
depends=(
    'curl' 'libcurl.so'
    'gcc-libs'
    'glibc'
    'libedit' 'libedit.so'
    'libffi' 'libffi.so'
    'libxml2' 'libxml2.so'
    'lua53'
    'ncurses' 'libncursesw.so' 'libpanelw.so'
    'perl'
    'python'
    'xz' 'liblzma.so'
    'z3' 'libz3.so'
    'zlib' 'libz.so'
    'zstd' 'libzstd.so'
)
makedepends=(
    'cmake'
    'jsoncpp'
    'ninja'
    'ocl-icd'
    'opencl-headers'
    'python-setuptools'
    'swig'
)
checkdepends=(
    'python-pexpect'
    'python-psutil'
)
optdepends=(
    'cuda: for OpenMP offloading to NVIDIA GPUs'
    'hsa-rocr: for OpenMP offloading to AMD GPUs'
    'python-guppy3: for opt-stats tool to show memory consumption'
    'python-psutil: for LLVM Integrated Tester'
    'python-pygments: for opt-viewer module'
    'python-yaml: for opt-viewer module'
    'sublime-text: for clang-format-sublime tool'
)
_major=${pkgver%%.*}
provides=(
    # Provides but doesn't replace as we install it on /opt
    "clang${_major}"
    "compiler-rt${_major}"
    "lld${_major}"
    "lldb${_major}"
    "${pkgname%-opt}"
    "llvm${_major}-libs"
    "openmp${_major}"
    "polly${_major}"
)
options=(
    'staticlibs'
    '!lto'  # use ThinLTO instead
)
source=("https://github.com/llvm/llvm-project/releases/download/llvmorg-${_pkgver}/llvm-project-${_pkgver}.src.tar.xz"{,.sig}
        '0201-enable-fstack-protector-strong-by-default.patch')
sha384sums=('44cfd82b41fa490191b58898c3d09f7a4472f479c21e1e66653e6e6c467a1fd1b1fbab4cbc0cb251597ad32aa8bb78d9'
            'SKIP'
            '1bf9730ada53600dcc26bef851b670ac52a05aaf9b77791f6a530aa5285f642195e990a4573da06f78edc680ae7df58a')
b2sums=('7c9250f99c8e5ae2097e89269ebf5bfdfb0fba8f67ab934377d24030c985013fe5475d0c9bd6d60a679e169772ad1723bc6e44ff9e4c7aed5627b9f1f1a2477a'
        'SKIP'
        '5e3e949867d6e3e1b78e2b24a75192058020b095b402de452e2611ff9a7b9bccbf370d841d987b331cad06fe4cc23ea0ad31b21c5e84f0a3f5055d3761621463')
validpgpkeys=('474E22316ABF4785A88C6E8EA2C794A986419D8A'   # Tom Stellard <tstellar@redhat.com>
              'D574BD5D1D0E98895E3BF90044F2485E45D59042')  # Tobias Hieta <tobias@hieta.se>

# TODO: Avoid adding LLVM into checkdepends just for LIT
[[ -n ${_bootstrap} ]] || checkdepends+=('llvm')

# Utilizing LLVM_DISTRIBUTION_COMPONENTS to avoid
# installing static libraries; inspired by Gentoo
_get_distribution_components() {
    local target
    ninja -C build-llvm -t targets | grep -Po 'install-\K.*(?=-stripped:)' | while read -r target; do
        case "${target}" in
            clang-libraries|llvm-libraries|distribution)
                continue
                ;;
            # shared libraries
            LLVM|LLVMgold)
                ;;
            # libraries needed for clang-tblgen
            LLVMDemangle|LLVMSupport|LLVMTableGen)
                ;;
            # exclude static libraries
            LLVM*)
                continue
                ;;
            # exclude llvm-exegesis (doesn't seem useful without libpfm)
            llvm-exegesis)
                continue
                ;;
            clang|clangd|clang-*)
                ;;
            clang*|findAllSymbols)
                continue
                ;;
        esac
        echo "${target}"
    done
}

_python_optimize() {
    python3 -m compileall "${@}"
    python3 -O -m compileall "${@}"
    python3 -OO -m compileall "${@}"
}

_python_version() {
    python3 <(\
        cat << 'EOF'
import sys
vi = sys.version_info
print(f"{vi.major}.{vi.minor}")
EOF
    )
}

prepare() {
    cd "llvm-project-${_pkgver}.src"

    # [extra]/clang additions: enable -fstack-protector-strong by default
    patch -p1 <../0201-enable-fstack-protector-strong-by-default.patch

    # Remove CMake find module for zstd; breaks if out of sync with upstream zstd
    rm llvm/cmake/modules/Findzstd.cmake

    # Attempt to convert script to Python 3
    2to3 -w -n --no-diffs \
        clang-tools-extra/clang-include-fixer/find-all-symbols/tool/run-find-all-symbols.py
}

build() {
    local _install="opt/${pkgbase%-opt}"
    local _common_options=(
        "-G" "Ninja"
        "-DCMAKE_BUILD_TYPE=Release"
        "-DCMAKE_INSTALL_PREFIX=/${_install}"
        "-DLLVM_APPEND_VC_REV=OFF"
    )
    local _llvm_options=(
        "-DCMAKE_SKIP_RPATH=ON"
        "-DCLANG_DEFAULT_PIE_ON_LINUX=ON"
        "-DCLANG_LINK_CLANG_DYLIB=ON"
        "-DENABLE_LINKER_BUILD_ID=ON"
        "-DLLVM_BINUTILS_INCDIR=/usr/include"
        "-DLLVM_BUILD_LLVM_DYLIB=ON"
        "-DLLVM_ENABLE_BINDINGS=OFF"
        "-DLLVM_ENABLE_CURL=ON"
        "-DLLVM_ENABLE_FFI=ON"
        "-DLLVM_ENABLE_PROJECTS=clang;clang-tools-extra;compiler-rt;lld;lldb;polly"
        "-DLLVM_ENABLE_RTTI=ON"
        "-DLLVM_ENABLE_Z3_SOLVER=ON"
        "-DLLVM_HOST_TRIPLE=${CHOST}"
        "-DLLVM_INCLUDE_BENCHMARKS=OFF"
        "-DLLVM_INCLUDE_DOCS=OFF"
        "-DLLVM_INCLUDE_EXAMPLES=OFF"
        "-DLLVM_INSTALL_UTILS=ON"
        "-DLLVM_LINK_LLVM_DYLIB=ON"
        "-DLLVM_POLLY_LINK_INTO_TOOLS=OFF"
        "-DLLVM_USE_PERF=ON"
    )
    local _openmp_options=(
        "-DCMAKE_MODULE_PATH=${srcdir}/build-llvm/lib/cmake"
        "-DLIBOMP_INSTALL_ALIASES=OFF"
        # Ignore OpenMP test failures and don't allow tests to stall for too long
        "-DOPENMP_LIT_ARGS=-sv --ignore-fail --time-tests --timeout=300"
    )
    local _bootstrap_options=(
        "-DCMAKE_AR=/${_install}/bin/llvm-ar"
        "-DCMAKE_C_COMPILER=clang"
        "-DCMAKE_CXX_COMPILER=clang++"
        "-DCMAKE_RANLIB=/${_install}/bin/llvm-ranlib"
        "-DLLVM_ENABLE_LTO=Thin"
        "-DLLVM_USE_LINKER=lld"
    )

    export CFLAGS+=" ${CPPFLAGS}"
    export CXXFLAGS+=" ${CPPFLAGS}"
    export LD_LIBRARY_PATH="${srcdir}/build-llvm/lib"
    if [[ -n ${_bootstrap} ]]; then
        export OLD_PATH="${PATH}"
        export PATH="/${_install}/bin:${PATH}"
        export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/${_install}/lib"
    fi
    export PATH="${srcdir}/build-llvm/bin:${PATH}"

    _cmake_args=("${_common_options[@]}" "${_llvm_options[@]}")
    [[ -n ${_bootstrap} ]] && _cmake_args+=("${_bootstrap_options[@]}")
    cmake -B build-llvm -S "llvm-project-${_pkgver}.src/llvm" "${_cmake_args[@]}"

    local distribution_components=$(_get_distribution_components | paste -sd\;)
    test -n "${distribution_components}"
    _cmake_args+=("-DLLVM_DISTRIBUTION_COMPONENTS=${distribution_components}")

    cmake -B build-llvm -S "llvm-project-${_pkgver}.src/llvm" "${_cmake_args[@]}"
    ninja -C build-llvm

    # Build OpenMP separate from LLVM, but combine them later during packaging
    _cmake_args=("${_common_options[@]}" "${_openmp_options[@]}")
    [[ -n ${_bootstrap} ]] && _cmake_args+=("${_bootstrap_options[@]}")
    cmake -B build-openmp -S "llvm-project-${_pkgver}.src/openmp" "${_cmake_args[@]}"
    ninja -C build-openmp
}

check() {
    local _install="opt/${pkgbase%%-opt}"
    local _py="$(_python_version)"

    export LD_LIBRARY_PATH="${srcdir}/build-llvm/lib"
    if [[ -n ${_bootstrap} ]]; then
        export PATH="${OLD_PATH}"
        # Allow LLVM Integrated Tester to be found for testing OpenMP
        export PYTHONPATH="/${_install}/lib/python${_py}/site-packages"
        unset OLD_PATH
    fi
    export PATH="${srcdir}/build-llvm/bin:${PATH}"

    ninja -C build-llvm check-llvm
    ninja -C build-llvm check-clang
    ninja -C build-llvm check-clang-tools
    # Disable until buildgo.sh script is actually working for us
    #ninja -C build-llvm check-compiler-rt || true
    ninja -C build-llvm check-polly
    ninja -C build-llvm check-lld
    # Arch Linux upstream doesn't check LLDB they built, so don't allow LLDB
    # test failures to block us from packaging the toolchain; tripping test(s)
    # should be fixed with upstream commit(s). ptrace() must be unrestricted.
    ninja -C build-llvm check-lldb || true

    # Arch Linux upstream doesn't check OpenMP as well
    ninja -C build-openmp check-libarcher
    ninja -C build-openmp check-libomp
    # All supported libomptarget tests fail to run
    #ninja -C build-openmp check-libomptarget
    ninja -C build-openmp check-ompt-multiplex
}

package() {
    local _install="opt/${pkgbase%%-opt}"
    local _py="$(_python_version)"

    DESTDIR="${pkgdir}" ninja -C build-llvm install-distribution
    DESTDIR="${pkgdir}" ninja -C build-openmp install
    cd "llvm-project-${_pkgver}.src"

    # Include lit for running lit-based tests in other projects
    pushd llvm/utils/lit
    python3 setup.py install --root="${pkgdir}" --prefix="/${_install}" -O1
    popd

    # Move scanbuild-py into site-packages and install Python bindings
    mv "${pkgdir}/${_install}"/lib/{libear,libscanbuild} \
        "${pkgdir}/${_install}/lib/python${_py}/site-packages/"
    cp -a clang/bindings/python/clang "${pkgdir}/${_install}/lib/python${_py}/site-packages/"

    # Symlink LLVMgold.so from lib/bfd-plugins
    # https://bugs.archlinux.org/task/28479
    install -d "${pkgdir}/${_install}/lib/bfd-plugins"
    ln -s ../LLVMgold.so "${pkgdir}/${_install}/lib/bfd-plugins/LLVMgold.so"

    # Move analyzer scripts out of /usr/libexec
    mv "${pkgdir}/${_install}"/libexec/* "${pkgdir}/${_install}/lib/clang/"
    rmdir "$pkgdir/${_install}/libexec"
    sed -i 's|libexec|lib/clang|' \
        "${pkgdir}/${_install}/bin/scan-build" \
        "${pkgdir}/${_install}/lib/python${_py}/site-packages/libscanbuild/analyze.py"

    # Compile Python scripts
    _python_optimize "${pkgdir}/${_install}/share" \
        "${pkgdir}/${_install}/lib/python${_py}/site-packages"

    # Follow Arch Linux upstream into removing this static library
    rm "${pkgdir}/${_install}/lib/libarcher_static.a"

    # Make sure there are no manpages if we don't package docs
    rm -r "${pkgdir}/${_install}/share/man"

    for _project in clang clang-tools-extra compiler-rt lld lldb llvm openmp polly; do
        install -Dm644 "${_project}/LICENSE.TXT" \
            "${pkgdir}/usr/share/licenses/${pkgname}/${_project}-LICENSE"
    done
}
