# Maintainer: Albert I <kras@raphielgang.org>

# This PKGBUILD is heavily based on llvm-git maintained by these contributors:
# Contributor: Reza Jahanbakhshi <reza.jahanbakhshi at gmail dot com
# Contributor: Lone_Wolf <lone_wolf@klaas-de-kat.nl>
# Contributor: yurikoles <root@yurikoles.com>
# Contributor: bearoso <bearoso@gmail.com>
# Contributor: Luchesar V. ILIEV <luchesar%2eiliev%40gmail%2ecom>
# Contributor: Anders Bergh <anders@archlinuxppc.org>
# Contributor: Armin K. <krejzi at email dot com>
# Contributor: Christian Babeux <christian.babeux@0x80.ca>
# Contributor: Jan "heftig" Steffens <jan.steffens@gmail.com>
# Contributor: Evangelos Foutras <evangelos@foutrelis.com>
# Contributor: Hesiod (https://github.com/hesiod)
# Contributor: Roberto Alsina <ralsina@kde.org>
# Contributor: Thomas Dziedzic < gostrc at gmail >
# Contributor: Tomas Lindquist Olsen <tomas@famolsen.dk>
# Contributor: Tomas Wilhelmsson <tomas.wilhelmsson@gmail.com>

pkgname=llvm18-opt
_pkgver=18.1.8
pkgver=${_pkgver/-/_}
pkgrel=2
epoch=1
pkgdesc='LLVM compiler suite stable version 18 (installs to /opt)'
arch=('x86_64')
url='https://llvm.org/'
license=('Apache-2.0 WITH LLVM-exception')
depends=(
    'curl' 'libcurl.so'
    'gcc-libs'
    'glibc'
    'libedit' 'libedit.so'
    'libffi' 'libffi.so'
    'libxml2' 'libxml2.so'
    'lua53'
    'ncurses' 'libncursesw.so' 'libpanelw.so'
    'perl'
    'python'
    'xz' 'liblzma.so'
    'z3' 'libz3.so'
    'zlib' 'libz.so'
    'zstd' 'libzstd.so'
)
makedepends=(
    'cmake'
    'jsoncpp'
    'ninja'
    'ocl-icd'
    'opencl-headers'
    'python-setuptools'
    'swig'
)
checkdepends=(
    'python-psutil'
)
optdepends=(
    'cuda: for OpenMP offloading to NVIDIA GPUs'
    'hsa-rocr: for OpenMP offloading to AMD GPUs'
    'python-guppy3: for opt-stats tool to show memory consumption'
    'python-psutil: for LLVM Integrated Tester'
    'python-pygments: for opt-viewer module'
    'python-yaml: for opt-viewer module'
    'sublime-text: for clang-format-sublime tool'
)
_major=${pkgver%%.*}
provides=(
    # Provides but doesn't replace as we install it on /opt
    "clang${_major}"
    "compiler-rt${_major}"
    "lld${_major}"
    "lldb${_major}"
    "${pkgname%-opt}"
    "llvm${_major}-libs"
    "openmp${_major}"
    "polly${_major}"
)
options=(
    'staticlibs'
    '!lto'  # use ThinLTO instead
)
source=("https://github.com/llvm/llvm-project/releases/download/llvmorg-${_pkgver}/llvm-project-${_pkgver}.src.tar.xz"{,.sig}
        '0001-Call-Import_AppendInittab-before-Py_Initialize.patch'
        '0002-Fix-lock-guards-in-PipePosix-cpp.patch'
        '0003-Fixed-SyntaxWarning-invalid-escape-sequence-s-in-dec.patch'
        '0004-Fixed-SyntaxWarning-invalid-escape-sequence-l-in-lld.patch'
        '0005-fix-clang-tools-extra-py-fix-invalid-escape-sequence.patch'
        '0006-Dont-rely-on-ScriptInterpreterPythonImpl-Initialize-.patch'
        '0007-Use-PyBytes-and-PyByteArray-in-Python-Data-Objects-u.patch'
        '0008-Fix-PythonDataObjectsTest.patch'
        '0101-llvm-SelectionDAG.patch'
        '0102-clang-disable-float128-diagnostics-for-device-compil.patch'
        '0201-enable-fstack-protector-strong-by-default.patch')
sha384sums=('1b8a2ae401dde9e662954a34aa29a2440d0dc2553974c3c9e20d67ea2bc2011a96f22efcfc4446b498dfb5c60484e6a6'
            'SKIP'
            'ad59f58e280f0edcd5b2205b8e9d2bf483060497f4d74885685a93cedc6a057c9ada405cfda6120922bf26221d632fba'
            '455bc668ee0047c18d03e78cef7a450208094335edc96d80c0ca85362ceae6f6f0a4fd9c8934a0f9413b0a71054bae8b'
            '929b98b996cfc909c65c91525e8b6e7b0b5521adf083c8d515816f4387e9887a3e6a48b6a01f9478771cbea698330581'
            'a44adbcdefe07fcfb88e32de7628bf887c9f23e14aae6fd2b9ddd8a2c72c01de521ca23d0adb4076d3aa0a7eed53fab3'
            'a98e52620645d1b7da97de5b0f9bb1107f82c4804de652af13f9cea4128fc83dd247179076ad86a4a7f0ccaac6551416'
            '94e3fca369ce1776207160a48271340fb4bf1a09f6f711b30d39a284edd0b312e7d6f5fac565eb6a28867f4dc708ad90'
            'ae701ead08edeb688cb9a3a377ba4a530eee564b51ec9439bf3dc762e6a4d790112ea39cc7df75a231bef16ab42a6dd5'
            'cb2fa926ffa31562caf5e63faedcc0e9718c491ea6007c2ff6e39151f42adca754675c20e99fc1822cf23edaad438b68'
            '2d96f239414909408db4551f2112bc6e827371255f741a5f3011bf5c29c50ee3bdf9f9c8bddadcf26469729c4e9d4f5b'
            '2c771e429d57d620f7ac7f4d7200e594366d66dc9e63de7700f74a90c444b5ee3ccf4205b85424efbce0646bcb8b4afc'
            '1bf9730ada53600dcc26bef851b670ac52a05aaf9b77791f6a530aa5285f642195e990a4573da06f78edc680ae7df58a')
b2sums=('a950492f1dbfb874dff63b1ffef86468169ba2f211a9733ec2d4cf30040f7f277ef00f048bb44dee9f97d7d762f0f241f19e5a2a7b0b49217d3821ddfc8c354f'
        'SKIP'
        '6ff78903104a6d6c5583597958e54b310218d8836b8405b0c04d476c89f25b803f1a4b07e68e156701a43f3d2c30d5b2a2f8a0f855f1685e3cb62baefb1d2ad1'
        '035552c1e254a8cfe91f5a1912cc6847e0cf12420c6919fe3716378e9b73803f2904a0852090feea3ad6e69bc587a603ae5bc5224c728a06b4e94b52770eab6f'
        'ea0a009dae6dadc8f571e492799182eda83c6784d0892d9ccceccee68a6c9db1050fb53adfb365703fc64bf648db3a56e21114a4d2a8b5006e114a1cab9e61c0'
        '09cca0dd3778f226c40ae73fc9ea2425d5b3464feb6821cb5f7d64c15e6601766ca08dca2e7e8dd04a43e5cedfe711a40f9389f5baed8d46db0f29dac60cdadb'
        '78fd2762ee7199effef4aeaf69f89642647a0ec7c6234f21a94938210cb0260bf2cbdcfe8863b5072ea01dd878977320105402c2e9f470e81afe039dbc8756a5'
        'd05a9499603baa63e19f65022443d69ad3a070c255a0249db17757b578b5b16c38479324152dc737bda3f7f838f538fca1cc8a0b2b829a5ba2ebef644e947cef'
        '1985ca58983e724d5262a03c5777f036d287c083be29ccac703ab336457035ae23c3f098448626ec209d2d50b2f913cb6b51ed50ec5698497c413f51af9ce531'
        'a0980c6a05cf5ce6b24df2bc7a7b098223ebcf7aca254d42eda1075bd33fdf972acc94580c6b66aec533c441d1108f805651abdd3d93893c79a62fedbf2dbab8'
        'f9cd2b5af2010d4986858b3c4c1d41826acbb1c50b62c3bc133b603e04ef73ed844d4b5522fb824c2c53e53fe2cead9a21f858733b572e9470f8788d8ef9beec'
        'e6742b4dab1246d3580ee6a91acb45a6224653c6d9c17c3c24fd698cf95dfab06ca73afafcd9e2f2272d0e31ae0de59244a57d4888c5079eadf63e2aa5aef16f'
        '5e3e949867d6e3e1b78e2b24a75192058020b095b402de452e2611ff9a7b9bccbf370d841d987b331cad06fe4cc23ea0ad31b21c5e84f0a3f5055d3761621463')
validpgpkeys=('474E22316ABF4785A88C6E8EA2C794A986419D8A'   # Tom Stellard <tstellar@redhat.com>
              'D574BD5D1D0E98895E3BF90044F2485E45D59042')  # Tobias Hieta <tobias@hieta.se>

# TODO: Avoid adding LLVM into checkdepends just for LIT
[[ -n ${_bootstrap} ]] || checkdepends+=('llvm')

# Utilizing LLVM_DISTRIBUTION_COMPONENTS to avoid
# installing static libraries; inspired by Gentoo
_get_distribution_components() {
    local target
    ninja -C build-llvm -t targets | grep -Po 'install-\K.*(?=-stripped:)' | while read -r target; do
        case "${target}" in
            clang-libraries|llvm-libraries|distribution)
                continue
                ;;
            # shared libraries
            LLVM|LLVMgold)
                ;;
            # libraries needed for clang-tblgen
            LLVMDemangle|LLVMSupport|LLVMTableGen)
                ;;
            # exclude static libraries
            LLVM*)
                continue
                ;;
            # exclude llvm-exegesis (doesn't seem useful without libpfm)
            llvm-exegesis)
                continue
                ;;
            clang|clangd|clang-*)
                ;;
            clang*|findAllSymbols)
                continue
                ;;
        esac
        echo "${target}"
    done
}

_python_optimize() {
    python3 -m compileall "${@}"
    python3 -O -m compileall "${@}"
    python3 -OO -m compileall "${@}"
}

_python_version() {
    python3 <(\
        cat << 'EOF'
import sys
vi = sys.version_info
print(f"{vi.major}.{vi.minor}")
EOF
    )
}

prepare() {
    cd "llvm-project-${_pkgver}.src"

    # Allow LLDB to be compatible with Python 3.12+
    patch -p1 <../0001-Call-Import_AppendInittab-before-Py_Initialize.patch

    # https://github.com/llvm/llvm-project/pull/90572
    patch -p1 <../0002-Fix-lock-guards-in-PipePosix-cpp.patch

    # Eliminate as many warnings as possible when built with newer dependencies
    patch -p1 <../0003-Fixed-SyntaxWarning-invalid-escape-sequence-s-in-dec.patch
    patch -p1 <../0004-Fixed-SyntaxWarning-invalid-escape-sequence-l-in-lld.patch
    patch -p1 <../0005-fix-clang-tools-extra-py-fix-invalid-escape-sequence.patch

    # This further fixes LLDB test failures with Python 3.12+
    patch -p1 <../0006-Dont-rely-on-ScriptInterpreterPythonImpl-Initialize-.patch
    patch -p1 <../0007-Use-PyBytes-and-PyByteArray-in-Python-Data-Objects-u.patch
    patch -p1 <../0008-Fix-PythonDataObjectsTest.patch

    # https://github.com/llvm/llvm-project/issues/82431
    sed '/^diff.*inline-asm-memop.ll/,$d' ../0101-llvm-SelectionDAG.patch | patch -p1

    # https://github.com/llvm/llvm-project/issues/88695
    patch -p1 <../0102-clang-disable-float128-diagnostics-for-device-compil.patch

    # [extra]/clang additions: enable -fstack-protector-strong by default
    patch -p1 <../0201-enable-fstack-protector-strong-by-default.patch

    # Remove CMake find module for zstd; breaks if out of sync with upstream zstd
    rm llvm/cmake/modules/Findzstd.cmake

    # Attempt to convert script to Python 3
    2to3 -w -n --no-diffs \
        clang-tools-extra/clang-include-fixer/find-all-symbols/tool/run-find-all-symbols.py
}

build() {
    local _install="opt/${pkgbase%-opt}"
    local _common_options=(
        "-G" "Ninja"
        "-DCMAKE_BUILD_TYPE=Release"
        "-DCMAKE_INSTALL_PREFIX=/${_install}"
        "-DLLVM_APPEND_VC_REV=OFF"
    )
    local _llvm_options=(
        "-DCMAKE_SKIP_RPATH=ON"
        "-DCLANG_DEFAULT_PIE_ON_LINUX=ON"
        "-DCLANG_LINK_CLANG_DYLIB=ON"
        "-DENABLE_LINKER_BUILD_ID=ON"
        "-DLLVM_BINUTILS_INCDIR=/usr/include"
        "-DLLVM_BUILD_LLVM_DYLIB=ON"
        "-DLLVM_ENABLE_BINDINGS=OFF"
        "-DLLVM_ENABLE_CURL=ON"
        "-DLLVM_ENABLE_FFI=ON"
        "-DLLVM_ENABLE_PROJECTS=clang;clang-tools-extra;compiler-rt;lld;lldb;polly"
        "-DLLVM_ENABLE_RTTI=ON"
        "-DLLVM_ENABLE_Z3_SOLVER=ON"
        "-DLLVM_HOST_TRIPLE=${CHOST}"
        "-DLLVM_INCLUDE_BENCHMARKS=OFF"
        "-DLLVM_INCLUDE_DOCS=OFF"
        "-DLLVM_INCLUDE_EXAMPLES=OFF"
        "-DLLVM_INSTALL_UTILS=ON"
        "-DLLVM_LINK_LLVM_DYLIB=ON"
        "-DLLVM_POLLY_LINK_INTO_TOOLS=OFF"
        "-DLLVM_USE_PERF=ON"
    )
    local _openmp_options=(
        "-DCMAKE_MODULE_PATH=${srcdir}/build-llvm/lib/cmake"
        "-DLIBOMP_INSTALL_ALIASES=OFF"
        # Ignore OpenMP test failures and don't allow tests to stall for too long
        "-DOPENMP_LIT_ARGS=-sv --ignore-fail --time-tests --timeout=300"
    )
    local _bootstrap_options=(
        "-DCMAKE_AR=/${_install}/bin/llvm-ar"
        "-DCMAKE_C_COMPILER=clang"
        "-DCMAKE_CXX_COMPILER=clang++"
        "-DCMAKE_RANLIB=/${_install}/bin/llvm-ranlib"
        "-DLLVM_ENABLE_LTO=Thin"
        "-DLLVM_USE_LINKER=lld"
    )

    export CFLAGS+=" ${CPPFLAGS}"
    export CXXFLAGS+=" ${CPPFLAGS}"
    export LD_LIBRARY_PATH="${srcdir}/build-llvm/lib"
    if [[ -n ${_bootstrap} ]]; then
        export OLD_PATH="${PATH}"
        export PATH="/${_install}/bin:${PATH}"
        export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/${_install}/lib"
    fi
    export PATH="${srcdir}/build-llvm/bin:${PATH}"

    _cmake_args=("${_common_options[@]}" "${_llvm_options[@]}")
    [[ -n ${_bootstrap} ]] && _cmake_args+=("${_bootstrap_options[@]}")
    cmake -B build-llvm -S "llvm-project-${_pkgver}.src/llvm" "${_cmake_args[@]}"

    local distribution_components=$(_get_distribution_components | paste -sd\;)
    test -n "${distribution_components}"
    _cmake_args+=("-DLLVM_DISTRIBUTION_COMPONENTS=${distribution_components}")

    cmake -B build-llvm -S "llvm-project-${_pkgver}.src/llvm" "${_cmake_args[@]}"
    ninja -C build-llvm

    # Build OpenMP separate from LLVM, but combine them later during packaging
    _cmake_args=("${_common_options[@]}" "${_openmp_options[@]}")
    [[ -n ${_bootstrap} ]] && _cmake_args+=("${_bootstrap_options[@]}")
    cmake -B build-openmp -S "llvm-project-${_pkgver}.src/openmp" "${_cmake_args[@]}"
    ninja -C build-openmp
}

check() {
    local _install="opt/${pkgbase%%-opt}"
    local _py="$(_python_version)"

    export LD_LIBRARY_PATH="${srcdir}/build-llvm/lib"
    if [[ -n ${_bootstrap} ]]; then
        export PATH="${OLD_PATH}"
        # Allow LLVM Integrated Tester to be found for testing OpenMP
        export PYTHONPATH="/${_install}/lib/python${_py}/site-packages"
        unset OLD_PATH
    fi
    export PATH="${srcdir}/build-llvm/bin:${PATH}"

    ninja -C build-llvm check-llvm
    ninja -C build-llvm check-clang
    ninja -C build-llvm check-clang-tools
    # Disable until buildgo.sh script is actually working for us
    #ninja -C build-llvm check-compiler-rt || true
    ninja -C build-llvm check-polly
    ninja -C build-llvm check-lld
    # Arch Linux upstream doesn't check LLDB they built, so don't allow LLDB
    # test failures to block us from packaging the toolchain; tripping test(s)
    # should be fixed with upstream commit(s). ptrace() must be unrestricted.
    ninja -C build-llvm check-lldb || true

    # Arch Linux upstream doesn't check OpenMP as well
    ninja -C build-openmp check-libarcher
    ninja -C build-openmp check-libomp
    # All supported libomptarget tests fail to run
    #ninja -C build-openmp check-libomptarget
    ninja -C build-openmp check-ompt-multiplex
}

package() {
    local _install="opt/${pkgbase%%-opt}"
    local _py="$(_python_version)"

    DESTDIR="${pkgdir}" ninja -C build-llvm install-distribution
    DESTDIR="${pkgdir}" ninja -C build-openmp install
    cd "llvm-project-${_pkgver}.src"

    # Include lit for running lit-based tests in other projects
    pushd llvm/utils/lit
    python3 setup.py install --root="${pkgdir}" --prefix="/${_install}" -O1
    popd

    # Move scanbuild-py into site-packages and install Python bindings
    mv "${pkgdir}/${_install}"/lib/{libear,libscanbuild} \
        "${pkgdir}/${_install}/lib/python${_py}/site-packages/"
    cp -a clang/bindings/python/clang "${pkgdir}/${_install}/lib/python${_py}/site-packages/"

    # Symlink LLVMgold.so from lib/bfd-plugins
    # https://bugs.archlinux.org/task/28479
    install -d "${pkgdir}/${_install}/lib/bfd-plugins"
    ln -s ../LLVMgold.so "${pkgdir}/${_install}/lib/bfd-plugins/LLVMgold.so"

    # Move analyzer scripts out of /usr/libexec
    mv "${pkgdir}/${_install}"/libexec/* "${pkgdir}/${_install}/lib/clang/"
    rmdir "$pkgdir/${_install}/libexec"
    sed -i 's|libexec|lib/clang|' \
        "${pkgdir}/${_install}/bin/scan-build" \
        "${pkgdir}/${_install}/lib/python${_py}/site-packages/libscanbuild/analyze.py"

    # Compile Python scripts
    _python_optimize "${pkgdir}/${_install}/share" \
        "${pkgdir}/${_install}/lib/python${_py}/site-packages"

    # Follow Arch Linux upstream into removing this static library
    rm "${pkgdir}/${_install}/lib/libarcher_static.a"

    # Make sure there are no manpages if we don't package docs
    rm -r "${pkgdir}/${_install}/share/man"

    for _project in clang clang-tools-extra compiler-rt lld lldb llvm openmp polly; do
        install -Dm644 "${_project}/LICENSE.TXT" \
            "${pkgdir}/usr/share/licenses/${pkgname}/${_project}-LICENSE"
    done
}
