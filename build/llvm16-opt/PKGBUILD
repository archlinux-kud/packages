# Maintainer: Albert I <kras@raphielgang.org>

# This PKGBUILD is heavily based on llvm-git maintained by these contributors:
# Contributor: Reza Jahanbakhshi <reza.jahanbakhshi at gmail dot com
# Contributor: Lone_Wolf <lone_wolf@klaas-de-kat.nl>
# Contributor: yurikoles <root@yurikoles.com>
# Contributor: bearoso <bearoso@gmail.com>
# Contributor: Luchesar V. ILIEV <luchesar%2eiliev%40gmail%2ecom>
# Contributor: Anders Bergh <anders@archlinuxppc.org>
# Contributor: Armin K. <krejzi at email dot com>
# Contributor: Christian Babeux <christian.babeux@0x80.ca>
# Contributor: Jan "heftig" Steffens <jan.steffens@gmail.com>
# Contributor: Evangelos Foutras <evangelos@foutrelis.com>
# Contributor: Hesiod (https://github.com/hesiod)
# Contributor: Roberto Alsina <ralsina@kde.org>
# Contributor: Thomas Dziedzic < gostrc at gmail >
# Contributor: Tomas Lindquist Olsen <tomas@famolsen.dk>
# Contributor: Tomas Wilhelmsson <tomas.wilhelmsson@gmail.com>

pkgbase=llvm16-opt
pkgname=('llvm16-opt' 'llvm16-ocaml-opt')
pkgver=16.0.6
pkgrel=1
arch=('x86_64')
url='https://llvm.org/'
license=('custom:Apache 2.0 with LLVM Exception')
makedepends=('cmake' 'ninja' 'libffi' 'libedit' 'ncurses' 'libxml2' 'python-setuptools' 'lldb'
             'ocaml-ctypes' 'ocaml-findlib' 'python-sphinx-automodapi' 'python-recommonmark' 'swig'
             'python-six' 'lua53' 'ocl-icd' 'opencl-headers' 'z3' 'jsoncpp' 'ocaml-stdlib-shims')
checkdepends=('python-psutil')
options=('staticlibs' '!lto') # Getting thousands of test failures with LTO
source=("https://github.com/llvm/llvm-project/releases/download/llvmorg-${pkgver}/llvm-project-${pkgver}.src.tar.xz"{,.sig}
        'llvm16-ocaml5.patch' # Until the time comes when we get official backport...
        'llvm-config.h')
sha384sums=('b817e6ba9b38cd3c14c67714b1ad7c8cf14881b99f3951135b6c59e6178c834e45f0d8a93257ac11b37a62921b3763dc'
            'SKIP'
            '1db97a8cea91f84919d8ce2ee7db17c22a3c4fab35708ec46151f5c82cba74bdc3cb34f4b43d42e5eca1d2246dbc543f'
            '3065a1f344a5a5bebeb0fd9fcc95bb325ebf63b20d9871d0f49bfbfd7a5434e3d5e8bdadac5a2d8033bb7fe2ebe3d7bb')
b2sums=('95192d39cbd2914e5609db365965f1c00bfea6c2d653b3996bd2acef8a2b37e37f6fc8a9d2b65711ad72657e0ef52c42f733053cf65051e7822f27396c30406d'
        'SKIP'
        '2346d09ac295d4929b4d3c05507be30bfb0d88f6df9b235cf1b07dc4127f53c332b6347ef42fb8c06079314cfa9a751eaf56c55f601b48633e29b088dba4cff9'
        'c7e56bfbb9983bc30977fed8d6e028d007dcce2bce03e91c38070fa4d5eb261919ab85f77a150cc31a857195586922b7bafb43070555da0194846fd1f6d1f515')
validpgpkeys=('474E22316ABF4785A88C6E8EA2C794A986419D8A'  # Tom Stellard <tstellar@redhat.com>
              'D574BD5D1D0E98895E3BF90044F2485E45D59042') # Tobias Hieta <tobias@hieta.se>

_python_optimize() {
    python3 -m compileall "${@}"
    python3 -O -m compileall "${@}"
    python3 -OO -m compileall "${@}"
}

_python_version() {
    python3 <(\
        cat << 'EOF'
import sys
vi = sys.version_info
print(f"{vi.major}.{vi.minor}")
EOF
    )
}

prepare() {
    # Fix building OCaml bindings, although tests threw itself up
    patch -d "${srcdir}/llvm-project-${pkgver}.src" -N -p1 <"${srcdir}/llvm16-ocaml5.patch"

    # Attempt to convert script to Python 3
    2to3 -w -n --no-diffs \
        "${srcdir}/llvm-project-${pkgver}.src/clang-tools-extra/clang-include-fixer/find-all-symbols/tool/run-find-all-symbols.py"
}

build() {
    local _install="opt/${pkgbase%%-opt}"
    local _bootstrap_options=(
        "-DCMAKE_AR=/${_install}/bin/llvm-ar"
        "-DCMAKE_C_COMPILER=clang"
        "-DCMAKE_CXX_COMPILER=clang++"
        "-DCMAKE_RANLIB=/${_install}/bin/llvm-ranlib"
        "-DLLVM_USE_LINKER=lld"
    )

    export CFLAGS+=" ${CPPFLAGS}"
    export CXXFLAGS+=" ${CPPFLAGS}"
    if [[ -n ${_bootstrap} ]]; then
        export OLD_PATH="${PATH}"
        export PATH="/${_install}/bin:${PATH}"
        export LD_LIBRARY_PATH="/${_install}/lib"
    fi

    cmake \
        -B _build \
        -S "${srcdir}/llvm-project-${pkgver}.src/llvm" \
        -G Ninja \
        ${_bootstrap:+"${_bootstrap_options[@]}"} \
        -D CMAKE_BUILD_TYPE=Release \
        -D CMAKE_INSTALL_PREFIX="/${_install}" \
        -D LLVM_BINUTILS_INCDIR="/${_install}/include" \
        -D LLVM_OCAML_INSTALL_PATH="/${_install}/lib/ocaml" \
        -D LLVM_APPEND_VC_REV=OFF \
        -D LLVM_VERSION_SUFFIX="" \
        -D LLVM_HOST_TRIPLE="${CHOST}" \
        -D LLVM_ENABLE_RTTI=ON \
        -D LLVM_ENABLE_FFI=ON \
        -D FFI_INCLUDE_DIR:PATH="$(pkg-config --variable=includedir libffi)" \
        -D LLVM_BUILD_LLVM_DYLIB=ON \
        -D LLVM_LINK_LLVM_DYLIB=ON \
        -D LLVM_INSTALL_UTILS=ON \
        -D LLVM_BUILD_DOCS=ON \
        -D LLVM_ENABLE_DOXYGEN=OFF \
        -D LLVM_ENABLE_SPHINX=ON \
        -D SPHINX_OUTPUT_HTML:BOOL=OFF \
        -D SPHINX_WARNINGS_AS_ERRORS=OFF \
        -D LLVM_ENABLE_PROJECTS="polly;lldb;lld;compiler-rt;clang-tools-extra;clang" \
        -D LLVM_LIT_ARGS="-sv --ignore-fail" \
        -D LLVM_ENABLE_DUMP=ON \
        -Wno-dev

    ninja -C _build
    ninja -C _build ocaml_doc
}

check() {
    # Arch does this for Clang/LLVM tests
    export LD_LIBRARY_PATH="${srcdir}/_build/lib"
    if [[ -n ${_bootstrap} ]]; then
        export PATH="${OLD_PATH}"
        unset OLD_PATH
    fi

    # Test failures are expected for OCaml bindings and LLDB
    # For most of LLDB tests to work, one needs ptrace() to be unrestricted
    for _project in llvm clang{,-tools} polly lld{,b}; do
        ninja -C _build "check-${_project}"
    done
}

package_llvm16-opt() {
    pkgdesc='LLVM compiler suite stable version 16 (installs to /opt)'
    depends=('gcc-libs' 'libedit' 'libffi' 'libxml2' 'lua53' 'ncurses' 'perl' 'z3' 'zlib')
    optdepends=('openmp: OpenMP support in clang with -fopenmp'
                'python: for scan-view and git-clang-format')
    # We provide LLVM tools, but not replace existing ones
    provides=('clang16' 'compiler-rt16' 'lld16' 'lldb16' 'llvm16' 'llvm16-libs' 'polly16')

    local _install="opt/${pkgbase%%-opt}"

    DESTDIR="${pkgdir}" ninja -C _build install

    # Include lit for running lit-based tests in other projects
    pushd "${srcdir}/llvm-project-${pkgver}.src/llvm/utils/lit"
    python3 setup.py install --root="${pkgdir}" --prefix="/${_install}" -O1
    popd

    # Move analyzer scripts out of libexec
    mv "${pkgdir}/${_install}"/libexec/{ccc,c++}-analyzer "${pkgdir}/${_install}/lib/clang/"
    mv "${pkgdir}/${_install}"/libexec/analyze-{cc,c++} "${pkgdir}/${_install}/lib/clang/"
    mv "${pkgdir}/${_install}"/libexec/intercept-{cc,c++} "${pkgdir}/${_install}/lib/clang/"
    rmdir "$pkgdir/${_install}/libexec"
    sed -i 's|libexec|lib/clang|' "${pkgdir}/${_install}/bin/scan-build"

    # OCaml bindings go to a separate package
    rm -rf "${srcdir}"/ocaml.{lib,doc}
    mv "${pkgdir}/${_install}/lib/ocaml" "${srcdir}/ocaml.lib"
    mv "${pkgdir}/${_install}/share/doc/LLVM/llvm/ocaml-html" "${srcdir}/ocaml.doc"

    # Symlink LLVMgold.so from lib/bfd-plugins
    # https://bugs.archlinux.org/task/28479
    install -d "${pkgdir}/${_install}/lib/bfd-plugins"
    ln -s ../LLVMgold.so "${pkgdir}/${_install}/lib/bfd-plugins/LLVMgold.so"

    if [[ ${CARCH} == x86_64 ]]; then
        # Needed for multilib (https://bugs.archlinux.org/task/29951)
        # Header stub is taken from Fedora
        mv "${pkgdir}/${_install}"/include/llvm/Config/llvm-config{,-64}.h
        cp "${srcdir}/llvm-config.h" "${pkgdir}/${_install}/include/llvm/Config/llvm-config.h"
    fi

    pushd "${srcdir}/llvm-project-${pkgver}.src"

    local _py=$(_python_version)
    # Install Python bindings and optimize them
    cp -a llvm/bindings/python/llvm "${pkgdir}/${_install}/lib/python${_py}/site-packages/"
    cp -a clang/bindings/python/clang "${pkgdir}/${_install}/lib/python${_py}/site-packages/"
    _python_optimize "${pkgdir}/${_install}/lib/python${_py}/site-packages"

    # Optimize other Python files except 2 problem cases
    _python_optimize "${pkgdir}/${_install}/share" -x 'clang-include-fixer|run-find-all-symbols'

    for _project in llvm clang{,-tools-extra} compiler-rt lld{,b} polly; do
        install -Dm644 "${_project}/LICENSE.TXT" \
            "${pkgdir}/usr/share/licenses/${pkgname}/${_project}-LICENSE"
    done

    popd
}

package_llvm16-ocaml-opt() {
    pkgdesc='OCaml bindings for LLVM stable version 16 (installs to /opt)'
    depends=("llvm16-opt=${pkgver}-${pkgrel}" 'ocaml-ctypes')
    # We provide LLVM tools, but not replace existing ones
    provides=('llvm16-ocaml')

    local _install="opt/${pkgbase%%-opt}"

    install -d "${pkgdir}/${_install}/lib"
    cp -a "${srcdir}/ocaml.lib" "${pkgdir}/${_install}/lib/ocaml"

    install -d "${pkgdir}/${_install}/share/doc/LLVM/llvm/ocaml-html"
    cp -a "${srcdir}/ocaml.doc" "${pkgdir}/${_install}/share/doc/LLVM/llvm/ocaml-html"

    install -Dm644 "${srcdir}/llvm-project-${pkgver}.src/llvm/LICENSE.TXT" \
        "${pkgdir}/usr/share/licenses/${pkgname}/LICENSE"
}
