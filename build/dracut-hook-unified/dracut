#!/usr/bin/env bash
# Copyright (C) 2023 Albert I (krasCGQ)
#
# SPDX-License-Identifier: Unlicense

kernels=()
build_all=false
build_uki=false
esp_directory=/boot/EFI
action=${1}

dracut_install() {
    kernel=${1}
    parameters=(
        '--force'
        '--hostonly'
        '--no-hostonly-cmdline'
        '--stdlog=2' # dracut can get really noisy
    )

    read -r pkgbase <"/usr/lib/modules/${kernel}/pkgbase"

    if ${build_uki}; then
        echo "==> Building unified kernel image for ${pkgbase}..."
        dracut "${parameters[@]}" --kver "${kernel}" "${esp_directory}/Linux/dracut-${pkgbase}.efi"
    else
        echo "==> Building initramfs for ${pkgbase}..."
        install -Dm644 "/usr/lib/modules/${kernel}/vmlinuz" "/boot/vmlinuz-${pkgbase}"
        dracut "${parameters[@]}" --kver "${kernel}" "/boot/dracut-${pkgbase}.img"
    fi
}

dracut_remove() {
    kernel=${1}

    read -r pkgbase <"/usr/lib/modules/${kernel}/pkgbase"
    echo "==> Removing initramfs and unified kernel image for ${pkgbase}..."
    rm -f "/boot/vmlinuz-${pkgbase}" "/boot/dracut-${pkgbase}.img" \
        "${esp_directory}/Linux/dracut-${pkgbase}.efi"
}

while read -r line; do
    if [[ ${line} == usr/lib/modules/*/pkgbase ]]; then
        # Build for this specific kernel only
        kernels+=("$(basename "${line%/pkgbase}")")
        continue
    elif [[ ${line} == usr/bin/dracut || ${line} == usr/lib/dracut/* ]]; then
        # Build for all kernels if dracut is updated
        build_all=true
        break
    fi
done

if ${build_all}; then
    unset kernels
    # Recursive search of all available kernels
    for kernel in /usr/lib/modules/*; do
        # Only include kernel packages installed with pacman
        pacman -Qo "${kernel}/pkgbase" >/dev/null 2>&1 || continue
        kernels+=("$(basename "${kernel}")")
    done
fi

# Check for any visible uefi="yes" to install UKIs to correct path
if grep -q -P '^uefi=(\")?yes(\")?' /etc/dracut.conf.d/*; then
    build_uki=true
fi

# Install UKIs to /efi/EFI if it's available (default: /boot/EFI)
if [[ -d /efi/EFI && ! -d /boot/EFI ]]; then
    esp_directory=/efi/EFI
fi

for kernel in "${kernels[@]}"; do
    eval "dracut_${action} ${kernel}"
done
